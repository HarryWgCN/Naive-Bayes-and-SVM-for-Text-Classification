



ÊµÌå³éÈ¡¼°Çé¸ĞÕı¸º¶È·ÖÎö×é¼ş 
½Ó¿ÚÎÄµµ  
























http://ICTCLAS.nlpir.org/
@ICTCLASÕÅ»ªÆ½²©Ê¿
2012-12


Ä¿Â¼
ÊµÌå³éÈ¡¼°Çé¸ĞÕı¸º¶È·ÖÎö×é¼ş	1
½Ó¿ÚÎÄµµ	1
Ä¿Â¼	3
0. ÊµÌå³éÈ¡×é¼ş¼ò½é	4
1£®C£«£«½Ó¿Ú	5
1.1 DE_Init	5
1.2 DE_Exit()	7
1.3 DE_ParseDoc	8
1.4 CLUS_AddContent	11
1.5 DE_GetLastErrMsg	12
2  DocExtratorÔËĞĞ»·¾³	13
3 ³£¼ûÎÊÌâ£¨FAQ£©	14
Q1: Linuxµ÷ÓÃlibDocExtrator.soµÄÊ±ºò£¬Á´½Ó²»ÉÏ¿â	14
Q2: DocExtractorÏµÍ³³õÊ¼»¯ÀÏÊÇÊ§°Ü	14
4 ×÷Õß¼ò½é	15


0. ÊµÌå³éÈ¡×é¼ş¼ò½é
¡¡¡¡ÊµÌå³éÈ¡£¨Entity Extrator£©ÊµÌå¹ØÏµ³éÈ¡ÊÇÖ¸×Ô¶¯Ê¶±ğ°üº¬ÔÚ×ÔÈ»ÓïÑÔÎÄ±¾ÖĞµÄÁ½¸öÊµÌåÖ®¼äµÄÔ¤¶¨Òå¹ØÏµ¡£ËùÎ½ÊµÌåÊÇÖ¸ÎÄ±¾ÖĞ°üº¬µÄÌØ¶¨ÊÂÊµĞÅÏ¢,ÈçÈËÎï¡¢×éÖ¯»ú¹¹¡¢µØÀíÎ»ÖÃµÈ¡£ÊµÌå¹ØÏµ³éÈ¡ÔÚÊı¾İ½á¹¹»¯¡¢ĞÅÏ¢¼ìË÷ºÍ×Ô¶¯Ó¦´ğÏµÍ³µÈÁìÓòÓĞ×ÅÖØÒªµÄÑĞ¾¿ÒâÒå¡£ÃÀ¹ú¹ú¼Ò±ê×¼¼¼ÊõÑĞ¾¿Ôº(NIST)ÔÚ2008Äê×éÖ¯µÄ×Ô¶¯ÄÚÈİ³éÈ¡(ACE,AutomaticContentExtraction)ÆÀ²âÖĞ¶¨ÒåÁË7ÖÖÊµÌå¹ØÏµÀàĞÍºÍ18ÖÖ×ÓÀàĞÍ¡£
¡¡¡¡
¡¡¡¡×ÔÈ»ÓïÑÔ´¦ÀíÓëĞÅÏ¢¼ìË÷¹²ÏíÆ½Ì¨/J nHB-O(b1[
¡¡¡¡Y
¡¡¡¡X
¡¡¡¡
¡¡¡¡
¡¡¡¡   ·ÃÎÊhttp://ictclas.nlpir.org/(×ÔÈ»ÓïÑÔ´¦ÀíÓëĞÅÏ¢¼ìË÷¹²ÏíÆ½Ì¨)£¬Äú¿ÉÒÔ»ñÈ¡DocExtrator×é¼şµÄ×îĞÂ°æ±¾£¬²¢»¶Ó­Äú¹Ø×¢ÕÅ»ªÆ½²©Ê¿µÄĞÂÀËÎ¢²© @ICTCLASÕÅ»ªÆ½²©Ê¿ ½»Á÷¡£1P_bR$vk0 ×ÔÈ»ÓïÑÔ´¦ÀíÓëĞÅÏ¢¼ìË÷¹²ÏíÆ½Ì¨1H9^+}NE*W;^
×ÔÈ»ÓïÑÔ´¦ÀíÓëĞÅÏ¢¼ìË÷¹²ÏíÆ½Ì¨5H8]U ]4`s"Q^


6b;t.P s@)\J0È»ÓïÑÔ´¦ÀíÓëĞÅÏ¢¼ìË÷¹²ÏíÆ½Ì¨-l3?3v"Z#X|{t#A!d Z Í¼1£ºÎÄµµÕı¸ºÇé¸Ğ·ÖÎö¹¦ÄÜÕ¹Ê¾
×ÔÈ»ÓïÑÔ´¦ÀíÓëĞÅÏ¢¼ìË÷¹²ÏíÆ½Ì¨-r
UM"c3u ]
1£®C£«£«½Ó¿Ú
1.1 DE_Init
Init the analyzer and prepare necessary data for DocExtrator according the configure file.
int DE_Init(const char *sPath=0,int nEncoding=GBK_CODE,const char *sLicenseCode=0);
RoutineRequired HeaderDE_Init<DocExtractor.h>Return Value
Return true if init succeed. Otherwise return false.
Parameters
sDefaultPath: Initial Directory Path, where Data directory stored.  the default value is 0, it indicates the initial directory is current working directory path
nEncoding:  Encoding of input string, default is GBK_CODE (GBK encoding), and it can be set with UTF8_CODE (UTF8 encoding) and BIG5_CODE (BIG5 encoding).
const char* sLicenceCode: licence coding of input string, 
Remarks
The DE_Init function must be invoked before any operation with DocExtrator. The whole system need call the function only once before starting DocExtrator. When stopping the system and make no more operation, DE_Exit should be invoked to destroy all working buffer. Any operation will fail if init do not succeed.
DE_Init fails mainly because of two reasons: 1) Required data is incompatible or missing 2) invalid parameters. Moreover, you could learn more from the log file 2014****.log in the current directory. 
Example
int main(int argc, char* argv[])
{
	// ³õÊ¼»¯	
	if(!DE_Init("",UTF8_CODE)) {
		printf("%s\n", DE_GetLastErrMsg());
		return 1;
	}

	// É¨Ãè
	int nRealCount;
	vector<string> vsFileName;
	fn_vScanFiles(argv[1], vsFileName,"txt");

	//fn_vScanFiles(std::string& sFolderName, std::vector<std::string>& vsFileName,tstring& sFilter)
	string sOutput = "";

	// ¼ÓÔØ
	printf("·ÖÎöÎÄÕÂ£¨Total %d£©...\n",vsFileName.size());
	int i;
	_tDocExtractResult result;
	for(i=0; i<vsFileName.size(); i++) {
		string sContent;
		gfn_bReadFile(vsFileName[i].c_str(), sContent);
		DE_ParseDoc(sContent.c_str(),result,true);//,LOCATION_REQUIRED|ORGANIZATION_REQUIRED|PERSON_REQUIRED
		printf("-------------------------------------\nÎÄ¼ş:%s\nÄÚÈİ£º\n%s\n\n------------------------------------\n·ÖÎö½á¹û£º\n", vsFileName[i].c_str(), sContent.c_str());
		printf("Person list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_PERSON]);
		printf("Loc list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_LOCATION]);
		printf("Org list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_ORGANIZATION]);
		printf("Abstract list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_ABSTRACT]);
		printf("Keyword list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_KEYWORD]);
		printf("Media list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_MEDIA]);
		printf("Author list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_AUTHOR]);
		printf("Country:%s\n",result.entity_list[DOC_EXTRACT_TYPE_COUNTRY]);
		printf("Province:%s\n",result.entity_list[DOC_EXTRACT_TYPE_PROVINCE]);
		printf("Food:%s\n",result.entity_list[DOC_EXTRACT_TYPE_FOOD]);
		printf("Transportation:%s\n",result.entity_list[DOC_EXTRACT_TYPE_TRANS]);
		printf("Apps:%s\n",result.entity_list[DOC_EXTRACT_TYPE_APPS]);
		printf("SENTIMENT:%d\n",result.sentiment_score);
		fTime=(float)lTime/(float)CLOCKS_PER_SEC;//Time cost
		printf("Size=%d Bytes\n",sContent.size());
	}

	// ÍË³ö
	DE_Exit();
	return 0;
}
Output
1.2 DE_Exit()
Exit the program and free all resources and destroy all working buffer used in DocExtrator.
void DE_Exit();
RoutineRequired HeaderDE_Exit<DocExtractor.h>Return Value
none.
Parameters
none
Remarks
The DE_Exit function must be invoked while stopping the system and make no more operation. And call DE_Exit function to restart DocExtrator. 
Example
int main(int argc, char* argv[])
{
	// ³õÊ¼»¯	
	if(!DE_Init("",UTF8_CODE)) {
		printf("%s\n", DE_GetLastErrMsg());
		return 1;
	}

	// É¨Ãè
	int nRealCount;
	vector<string> vsFileName;
	fn_vScanFiles(argv[1], vsFileName,"txt");

	//fn_vScanFiles(std::string& sFolderName, std::vector<std::string>& vsFileName,tstring& sFilter)
	string sOutput = "";

	// ¼ÓÔØ
	printf("·ÖÎöÎÄÕÂ£¨Total %d£©...\n",vsFileName.size());
	int i;
	_tDocExtractResult result;
	for(i=0; i<vsFileName.size(); i++) {
		string sContent;
		gfn_bReadFile(vsFileName[i].c_str(), sContent);
		DE_ParseDoc(sContent.c_str(),result,true);//,LOCATION_REQUIRED|ORGANIZATION_REQUIRED|PERSON_REQUIRED
		printf("-------------------------------------\nÎÄ¼ş:%s\nÄÚÈİ£º\n%s\n\n------------------------------------\n·ÖÎö½á¹û£º\n", vsFileName[i].c_str(), sContent.c_str());
		printf("Person list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_PERSON]);
		printf("Loc list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_LOCATION]);
		printf("Org list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_ORGANIZATION]);
		printf("Abstract list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_ABSTRACT]);
		printf("Keyword list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_KEYWORD]);
		printf("Media list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_MEDIA]);
		printf("Author list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_AUTHOR]);
		printf("Country:%s\n",result.entity_list[DOC_EXTRACT_TYPE_COUNTRY]);
		printf("Province:%s\n",result.entity_list[DOC_EXTRACT_TYPE_PROVINCE]);
		printf("Food:%s\n",result.entity_list[DOC_EXTRACT_TYPE_FOOD]);
		printf("Transportation:%s\n",result.entity_list[DOC_EXTRACT_TYPE_TRANS]);
		printf("Apps:%s\n",result.entity_list[DOC_EXTRACT_TYPE_APPS]);
		printf("SENTIMENT:%d\n",result.sentiment_score);
		fTime=(float)lTime/(float)CLOCKS_PER_SEC;//Time cost
		printf("Size=%d Bytes\n",sContent.size());
	}

	// ÍË³ö
	DE_Exit();
	return 0;
}
Output
1.3 DE_ParseDoc
Generation of single document summarization.
bool DE_ParseDoc(const char *sText,_tDocExtractResult& result,bool bSummaryNeeded=true,unsigned int nFuncRequired=ALL_REQUIRED);
RoutineRequired HeaderDE_ParseDoc<DocExtractor.h>Return Value
Return true if init succeed. Otherwise return false.
Parameters
sText:  document content
result:   document extract result
typedef struct _tDocExtractResult{
Char  entity_list[DOC_EXTRACT_TYPE_COUNT][DOC_EXTRACT_TYPE_MAX_LENGTH+1];
   //personal name list, delimiter with #
int sentiment_score;//Çé¸Ğ¼«ĞÔÅĞ·Ö
}DOC_EXTRAXT_RESULT;
bSummaryNeeded: whether or not calculated summary
Remarks
Example
int main(int argc, char* argv[])
{
	// ³õÊ¼»¯	
	if(!DE_Init("",UTF8_CODE)) {
		printf("%s\n", DE_GetLastErrMsg());
		return 1;
	}

	// É¨Ãè
	int nRealCount;
	vector<string> vsFileName;
	fn_vScanFiles(argv[1], vsFileName,"txt");
	string sOutput = "";

	// ¼ÓÔØ
	printf("·ÖÎöÎÄÕÂ£¨Total %d£©...\n",vsFileName.size());
	int i;
	_tDocExtractResult result;
	for(i=0; i<vsFileName.size(); i++) {
		string sContent;
		gfn_bReadFile(vsFileName[i].c_str(), sContent);
		DE_ParseDoc(sContent.c_str(),result,true);//,LOCATION_REQUIRED|ORGANIZATION_REQUIRED|PERSON_REQUIRED
		printf("-------------------------------------\nÎÄ¼ş:%s\nÄÚÈİ£º\n%s\n\n------------------------------------\n·ÖÎö½á¹û£º\n", vsFileName[i].c_str(), sContent.c_str());
		printf("Person list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_PERSON]);
		printf("Loc list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_LOCATION]);
		printf("Org list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_ORGANIZATION]);
		printf("Abstract list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_ABSTRACT]);
		printf("Keyword list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_KEYWORD]);
		printf("Media list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_MEDIA]);
		printf("Author list:%s\n",result.entity_list[DOC_EXTRACT_TYPE_AUTHOR]);
		printf("Country:%s\n",result.entity_list[DOC_EXTRACT_TYPE_COUNTRY]);
		printf("Province:%s\n",result.entity_list[DOC_EXTRACT_TYPE_PROVINCE]);
		printf("Food:%s\n",result.entity_list[DOC_EXTRACT_TYPE_FOOD]);
		printf("Transportation:%s\n",result.entity_list[DOC_EXTRACT_TYPE_TRANS]);
		printf("Apps:%s\n",result.entity_list[DOC_EXTRACT_TYPE_APPS]);
		printf("SENTIMENT:%d\n",result.sentiment_score);
		fTime=(float)lTime/(float)CLOCKS_PER_SEC;//Time cost
		printf("Size=%d Bytes\n",sContent.size());
	}

	// ÍË³ö
	DE_Exit();
	return 0;
}
Output


1.4 CLUS_AddContent

get Positive or negative emotion in the document.

int  DE_ComputeSentimentDoc(const char *sText);
RoutineRequired HeaderDE_ComputeSentimentDoc<DocExtractor.h>Return Value
the emotional value about the document.
Parameters
sText: [IN] Document content

Remarks
This function can be performed repeatedly before the result is printed
in the process
Example
int main(int argc, char* argv[])
{
	// ³õÊ¼»¯	
	if(!DE_Init("",UTF8_CODE)) {
		printf("%s\n", DE_GetLastErrMsg());
		return 1;
	}
	// É¨Ãè
	int nRealCount;
	vector<string> vsFileName;
	fn_vScanFiles(argv[1], vsFileName,"txt");
	string sOutput = "";
	printf("·ÖÎöÎÄÕÂ£¨Total %d£©...\n",vsFileName.size());
	int i;
	for(i=0; i<vsFileName.size(); i++) {
		string sContent;
		gfn_bReadFile(vsFileName[i].c_str(), sContent);
		int nSent = DE_ComputeSentimentDoc(sContent.c_str());
		printf("SENTIMENT:%d\n",nSent);	
	}

	// ÍË³ö
	DE_Exit();
}
Output

1.5 DE_GetLastErrMsg
const char* DE_GetLastErrMsg();
RoutineRequired HeaderDE_GetLastErrMsg<DocExtractor.h>Return Value
Return the lastest error msg.

Parameters
NULL
Remarks
This function can be performed repeatedly before the result is printed
in the process
Example
int main(int argc, char* argv[])
{
	// ³õÊ¼»¯	
	if(!DE_Init("",UTF8_CODE)) {
		printf("%s\n", DE_GetLastErrMsg());
		return 1;
	}
	// É¨Ãè
	int nRealCount;
	vector<string> vsFileName;
	fn_vScanFiles(argv[1], vsFileName,"txt");
	string sOutput = "";
	printf("·ÖÎöÎÄÕÂ£¨Total %d£©...\n",vsFileName.size());
	int i;
	for(i=0; i<vsFileName.size(); i++) {
		string sContent;
		gfn_bReadFile(vsFileName[i].c_str(), sContent);
		int nSent = DE_ComputeSentimentDoc(sContent.c_str());
		printf("SENTIMENT:%d\n",nSent);	
	}

	// ÍË³ö
	DE_Exit();
}
Output

2  DocExtratorÔËĞĞ»·¾³
   1. ¿ÉÒÔÖ§³ÖWindows¡¢Linux¡¢FreeBSDµÈ¶àÖÖ»·¾³£¬Ö§³ÖÆÕÍ¨PC»úÆ÷¼´¿ÉÔËĞĞ¡£
   2. Ö§³ÖGBK/UTF-8/BIG5

3 ³£¼ûÎÊÌâ£¨FAQ£©
Q1: Linuxµ÷ÓÃlibDocExtrator.soµÄÊ±ºò£¬Á´½Ó²»ÉÏ¿â
ÀıÈçÖ´ĞĞÊ¾Àı³ÌĞò½á¹ûÈçÏÂ£º
[root@localhost linux_c_sample]# ./test 
./test: error while loading shared libraries: libDocExtrator.so: cannot open shared object file: No such file or directory
Answer: 
Ó¦µ±ÉèÖÃÏµÍ³µÄLD_LIBRARY_PATH£¬¼´£ºexport LD_LIBRARY_PATH=./
²¢ÇÒÇë±£Ö¤ÔÚ±¾Ä¿Â¼Ò²ÓĞlibNLPIR.so
Q2: DocExtractorÏµÍ³³õÊ¼»¯ÀÏÊÇÊ§°Ü
Answer: 
ÇëÄú±£Ö¤NLPIR.userÎÄ¼şÎ´¹ıÆÚ£¬ÁíÍâ¿É²Î¿¼"20***.err"ÎÄ¼ş²é¿´´íÎóĞÅÏ¢














4 ×÷Õß¼ò½é






ÕÅ»ªÆ½ ²©Ê¿ ¸±½ÌÊÚ Ë¶µ¼
±±¾©Àí¹¤´óÑ§¼ÆËã»úÑ§Ôº Ôº³¤ÖúÀí
±±¾©Àí¹¤´óÑ§ÍøÂçËÑË÷ÍÚ¾òÓë°²È«ÊµÑéÊÒ Ö÷ÈÎ
µØÖ·£º±±¾©º£µíÇøÖĞ¹Ø´åÄÏ´ó½Ö5ºÅ 100081
µç»°£º+86-10-68918642
Email:kevinzhang@bit.edu.cn
MSN:  pipy_zhang@msn.com;
ÍøÕ¾: http://ictclas.nlpir.org (×ÔÈ»ÓïÑÔ´¦ÀíÓëĞÅÏ¢¼ìË÷¹²ÏíÆ½Ì¨)
²©¿Í:http://hi.baidu.com/drkevinzhang/
Î¢²©: @ICTCLASÕÅ»ªÆ½²©Ê¿


Dr. Kevin Zhang  (ÕÅ»ªÆ½£¬Zhang Hua-Ping)
Associate Professor, Graduate Supervisor
Dean Assistant, School of Computer
Director, Web Search,Mining and Security Lab.
Beijing Institute of Technology 
Add: No.5, South St.,Zhongguancun,Haidian District,Beijing,P.R.C  PC:100081
Tel: +86-10-68918642
Email:kevinzhang@bit.edu.cn
MSN:  pipy_zhang@msn.com;
Website: http://ictclas.nlpir.org (Natural Language Processing and Information Retrieval Sharing Platform)
Blog:http://hi.baidu.com/drkevinzhang/
Twitter: @ICTCLASÕÅ»ªÆ½²©Ê¿


Çé¸ĞÕı¸º¶È×é¼ş(DocExtrator) ½Ó¿ÚÎÄµµ            http://ICTCLAS.nlpir.org

NLPIR Copyright (c) 2013 Kevin Zhang. All rights reserved.    	               3/14

